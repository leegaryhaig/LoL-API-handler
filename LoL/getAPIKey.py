#! Python3
import time, re, datetime, calendar, bcrypt
from selenium import webdriver
from selenium.webdriver.support.events import EventFiringWebDriver, AbstractEventListener

hash_cred = {'username' : b'$2b$12$v7N4BgV0LYiuoFpFld2dge/xneblC0UulkNnIOJlhjI7jTnbu1Fr2',
             'password' : b'$2b$12$ofA.5QDPPskRvHvnehcmCu26FFICl9vsavHSFeR0h26K01FnQGLIK'}

# Finds the date from a string of text and returns it into datetime() fromat
def findDate(string):
    match = re.search(r'(\w{3})\s(\d{1,2})\w{2},\s(\d{4})\s@\s(\d{1,2}):(\d{2})(\w{2})', string)

    # Create a reverse dictionary for calendar.month_abbr[num] method
    rvs_dict = {v: k for k,v in enumerate(calendar.month_abbr)}

    # if time is 'pm' add 12 hours to make it 24 hour format
    if match.group(6) == 'pm':
        hr = int(match.group(4)) + 12
    else:
        hr = int(match.group(4))

    api_dt = datetime.datetime(int(match.group(3)), int(rvs_dict[match.group(1)]), int(match.group(2)),
                               hr, int(match.group(5)))

    return api_dt

# Selenium abstract listener that will listen to a click event on the 'regenerate' API key
class MyListener(AbstractEventListener):
    def after_click(self, driver):
        print("Event Logged: Regenerate button clicked")


# This script should automatically grab the API_Key (that needs to be autogenerated ever 24hours) on the LoL website
def getKey():
    driver = webdriver.Chrome('chrome/chromedriver')
    driver.get('https://developer.riotgames.com/')

    # ef_driver object is a wrapper[a subroutine in a program] around a arbitrary WebDriver instance which supports firing events
    ef_driver = EventFiringWebDriver(driver, MyListener)

    time.sleep(1)

    try:
        # Goes through the login process to get to API Key page
        loginElem = driver.find_element_by_xpath('//*[@id="site-navbar-collapse"]/ul[2]/li/a')
        loginElem.click()
        time.sleep(1)

        usernameInput = driver.find_element_by_xpath('//*[@id="login-form-username"]')
        passwordInput = driver.find_element_by_xpath('//*[@id="login-form-password"]')

        while True:
            username = input('Username:')
            password = input('Password:')

            if bcrypt.checkpw(username.encode(), hash_cred['username']) and bcrypt.checkpw(password.encode(), hash_cred['password']):
                print('Matches hashed credentials')
                break
            else:
                print('Invalid credentials please try again')
                continue

        print('Logging in...')

        usernameInput.send_keys(username)
        passwordInput.send_keys(password)

        time.sleep(1)
        loginButton = driver.find_element_by_xpath('//*[@id="login-button"]')
        loginButton.click()
        time.sleep(2)

        # Check the current time (omit the second and microseconds)
        dt = datetime.datetime.now()
        dt = dt.replace(second=0, microsecond=0)

        # Format the expiration date into a datetime object format (omit the second and microsecond)
        api_Expiration = driver.find_element_by_xpath('/html/body/div[2]/div/form/div[3]/div/div[2]/div[2]/p[3]/b')
        api_dt = findDate(api_Expiration.text)

        # If API key has expired, generate a new key
        time.sleep(1)

        if dt > api_dt:
            print('The API key has expired...')
            print('Please solve captcha and hit Generate new key...')

            #gen_Key = ef_driver.find_element_by_xpath('/html/body/div[2]/div/form/div[3]/div/div[4]/div[2]/div[2]/input')
            show_button = ef_driver.find_element_by_xpath('//*[@id="apikey_show"]')


            time.sleep(1)

        else:
            print('The API key is still valid')

        # Copy the API key

        api_Elem = driver.find_element_by_xpath('//*[@id="apikey"]')
        api_key = api_Elem.get_attribute('value')

        return api_key

    except:
        print('Unable to Retrieve API Key')
